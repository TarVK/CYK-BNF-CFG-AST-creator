(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["library"] = factory();
	else
		root["library"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/BNF.ts":
/*!********************!*\
  !*** ./src/BNF.ts ***!
  \********************/
/*! exports provided: BNFinterpreter, BNF */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BNFinterpreter\", function() { return BNFinterpreter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BNF\", function() { return BNF; });\n/* harmony import */ var _Interpreter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Interpreter */ \"./src/Interpreter.ts\");\n/* harmony import */ var _CFG__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CFG */ \"./src/CFG.ts\");\n/* harmony import */ var _Tokenizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Tokenizer */ \"./src/Tokenizer.ts\");\nvar __assign = (undefined && undefined.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __spreadArrays = (undefined && undefined.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\n\r\n\r\n/**\r\n * Creates a symbol from some given text\r\n */\r\nvar c = function (text) { return \"'\" + text + \"'\"; };\r\nvar w = function (text) { return \"\\\"\" + text + \"\\\"\"; };\r\n/**\r\n * An interpreter to read the BNF language and output grammar and tokizer data accordingly\r\n */\r\nvar BNFinterpreter = new _Interpreter__WEBPACK_IMPORTED_MODULE_0__[\"Interpreter\"]({\r\n    tokenizer: {\r\n        sym: { match: /\\s*\\<([a-zA-Z0-9\\-]+)\\>\\s*/, eval: function (text, match) { return match[1]; } },\r\n        assign: /\\s*::=\\s*/,\r\n        or: /\\s*\\|\\s*/,\r\n        text: {\r\n            match: /\"(([\\\\\\\\]|\\\\\"|[^\\\\\"])*)\"|'(([\\\\\\\\]|\\\\'|[^\\\\'])*)'/,\r\n            eval: function (text, match) {\r\n                return (match[1] || match[3] || \"\")\r\n                    .replace(/\\\\\"/, '\"')\r\n                    .replace(/\\\\'/, \"'\")\r\n                    .replace(/\\\\\\\\/, \"\\\\\");\r\n            },\r\n        },\r\n        eol: /\\s*\\r*\\n|$/,\r\n    },\r\n    grammar: {\r\n        GRAMMAR: [\r\n            {\r\n                parts: [\"GRAMMAR\", \"LINE\"],\r\n                eval: function (_a) {\r\n                    var v = _a[0];\r\n                    return v;\r\n                },\r\n            },\r\n            {\r\n                parts: [\"LINE\"],\r\n                eval: function (_a, context) {\r\n                    var sym = _a[0];\r\n                    return (__assign({ startSymbol: sym }, context));\r\n                },\r\n            },\r\n        ],\r\n        LINE: [\r\n            {\r\n                parts: [\"sym\", \"assign\", \"DEF\"],\r\n                eval: function (_a, context) {\r\n                    var sym = _a[0], def = _a[2];\r\n                    context.grammar[sym] = def;\r\n                    return sym;\r\n                },\r\n            },\r\n            { parts: [\"LINE\", \"eol\"], eval: function (_a) {\r\n                    var sym = _a[0];\r\n                    return sym;\r\n                } },\r\n            { parts: [\"eol\"], eval: function (v) { return v; } },\r\n        ],\r\n        DEF: [\r\n            {\r\n                parts: [\"DEF\", \"or\", \"SEQ\"],\r\n                eval: function (_a) {\r\n                    var def = _a[0], pattern = _a[2];\r\n                    return __spreadArrays(def, [pattern]);\r\n                },\r\n            },\r\n            { parts: [\"SEQ\"], eval: function (_a) {\r\n                    var pattern = _a[0];\r\n                    return [pattern];\r\n                } },\r\n        ],\r\n        SEQ: [\r\n            {\r\n                parts: [\"SEQ\", \"MATCH\"],\r\n                eval: function (_a) {\r\n                    var seq = _a[0], sym = _a[1];\r\n                    return ({ parts: __spreadArrays(seq.parts, [sym]) });\r\n                },\r\n            },\r\n            { parts: [\"MATCH\"], eval: function (_a) {\r\n                    var sym = _a[0];\r\n                    return ({ parts: [sym] });\r\n                } },\r\n        ],\r\n        MATCH: [\r\n            {\r\n                parts: [\"text\"],\r\n                eval: function (_a, context) {\r\n                    var v = _a[0];\r\n                    var symbol = w(v);\r\n                    var chars = v.split(\"\");\r\n                    // Create a terminal token for each character\r\n                    chars.forEach(function (char) {\r\n                        context.tokenizer[c(char)] = char;\r\n                    });\r\n                    // Create a symbol that matches this token sequence\r\n                    context.grammar[symbol] = [\r\n                        {\r\n                            parts: chars.map(function (char) { return c(char); }),\r\n                            metaData: \"word\",\r\n                        },\r\n                    ];\r\n                    return symbol;\r\n                },\r\n            },\r\n            {\r\n                parts: [\"sym\"],\r\n                eval: function (_a, context) {\r\n                    var v = _a[0];\r\n                    if (v.toLowerCase() == \"eol\")\r\n                        context.tokenizer[v] = /\\r*\\n|$/;\r\n                    return v;\r\n                },\r\n            },\r\n        ],\r\n    },\r\n}, \"GRAMMAR\");\r\nvar BNF = /** @class */ (function () {\r\n    /**\r\n     * Creates a grammar based on a passed BNF syntax\r\n     * @param grammar The grammar to create\r\n     */\r\n    function BNF(grammar) {\r\n        var result = this.createTokenizerAndCFG(grammar);\r\n        if (\"error\" in result)\r\n            if (\"index\" in result)\r\n                throw Error(\"Syntax error at index \" + result.index);\r\n            else\r\n                throw Error(\"Syntax error\");\r\n        this.CFG = result.grammar;\r\n        this.tokenizer = result.tokenizer;\r\n    }\r\n    /**\r\n     * Creates a CFG and tokenizer from the given BNF string\r\n     * @param grammar The BNF input grammar\r\n     * @returns The resulting tokenizer and CFG, or an error\r\n     */\r\n    BNF.prototype.createTokenizerAndCFG = function (grammar) {\r\n        var result = BNFinterpreter.evaluate(grammar, {\r\n            tokenizer: {},\r\n            grammar: {},\r\n        });\r\n        if (\"error\" in result)\r\n            return result;\r\n        return {\r\n            grammar: new _CFG__WEBPACK_IMPORTED_MODULE_1__[\"CFG\"](result.grammar, result.startSymbol),\r\n            tokenizer: new _Tokenizer__WEBPACK_IMPORTED_MODULE_2__[\"Tokenizer\"](result.tokenizer),\r\n        };\r\n    };\r\n    /**\r\n     * Creates an AST tree for the given input string\r\n     * @param input The input string\r\n     * @returns An AST tree if the input conforms to the grammar, or an error otherwise\r\n     */\r\n    BNF.prototype.createASTtree = function (input) {\r\n        // Tokenize the input\r\n        var tokens = this.tokenizer.tokenize(input);\r\n        if (\"error\" in tokens)\r\n            return tokens;\r\n        // Create a tree out of the tokens\r\n        var tree = this.CFG.createASTtree(tokens);\r\n        if (\"error\" in tree)\r\n            return tree;\r\n        // Cleanup terminal nodes\r\n        _CFG__WEBPACK_IMPORTED_MODULE_1__[\"CFG\"].walkTree(tree, function (node) {\r\n            if (\"children\" in node && node.pattern.metaData == \"word\") {\r\n                delete node.children;\r\n                delete node.pattern;\r\n            }\r\n        });\r\n        return tree;\r\n    };\r\n    return BNF;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://library/./src/BNF.ts?");

/***/ }),

/***/ "./src/CFG.ts":
/*!********************!*\
  !*** ./src/CFG.ts ***!
  \********************/
/*! exports provided: CFG */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CFG\", function() { return CFG; });\n/* harmony import */ var _CNF__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CNF */ \"./src/CNF.ts\");\nvar __assign = (undefined && undefined.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __spreadArrays = (undefined && undefined.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nvar s = 0;\r\n/** Generates a new symbol */\r\nvar g = function () { return s++ + \"\"; };\r\n/**\r\n * A class that can be used to create an arbitrary Context Free Grammar, and allows for creation of an AST tree according to said grammar\r\n */\r\nvar CFG = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance\r\n     * @param grammar The grammmar to create an instance for\r\n     * @param startSymbol The symbol that a matched string should have\r\n     */\r\n    function CFG(grammar, startSymbol) {\r\n        this.grammar = grammar;\r\n        this.startSymbol = startSymbol;\r\n        this.CNF = this.createCNF(grammar, startSymbol);\r\n    }\r\n    /**\r\n     * Creates a CNF grammar representing the given BNF grammar\r\n     * @param grammar The base BNF grammar\r\n     * @param startSymbol The start symbol\r\n     * @returns The CNF grammar representing the BNF grammar\r\n     */\r\n    CFG.prototype.createCNF = function (grammar, startSymbol) {\r\n        var cfg = this.copyCFG(grammar);\r\n        // Conversion as described in  https://en.wikipedia.org/wiki/Chomsky_normal_form#Converting_a_grammar_to_Chomsky_normal_form\r\n        // Some steps that don't apply to our representation are skipped\r\n        // All of these operations store relevant metadata in the derived patterns,\r\n        // which can be used to construct the AST tree from the binary tree\r\n        this.performBIN(cfg);\r\n        this.performDEL(cfg);\r\n        this.performUNIT(cfg);\r\n        // Convert the CNF complying grammar to CNF format\r\n        var symbols = Object.keys(cfg);\r\n        var cnf = {};\r\n        symbols.forEach(function (symbol) {\r\n            var options = cfg[symbol];\r\n            cnf[symbol] = options.map(function (pattern) { return ({\r\n                left: pattern.parts[0],\r\n                right: pattern.parts[1],\r\n                metaData: __assign({}, pattern.metaData),\r\n            }); });\r\n        });\r\n        return new _CNF__WEBPACK_IMPORTED_MODULE_0__[\"CNF\"](cnf, startSymbol);\r\n    };\r\n    /**\r\n     * Deep copies and normalizes the given grammar, also transforms the metadata\r\n     * @param grammar The grammar to copy\r\n     * @returns A copy of the grammar\r\n     */\r\n    CFG.prototype.copyCFG = function (grammar) {\r\n        var cfg = {};\r\n        var copyPattern = function (pattern, symbol) { return (__assign(__assign({}, pattern), { metaData: { orPattern: __assign(__assign({}, pattern), { defSymbol: symbol }) } })); };\r\n        Object.keys(grammar).forEach(function (symbol) {\r\n            var def = grammar[symbol];\r\n            // Store the definition with the original definition as metadata\r\n            cfg[symbol] = def.map(function (pattern) { return copyPattern(pattern, symbol); });\r\n        });\r\n        return cfg;\r\n    };\r\n    /**\r\n     * Perform the BIN operation, splitting rules to ensure they have no more than 2 symbols\r\n     * @param cfg The grammar to perform the operation on\r\n     */\r\n    CFG.prototype.performBIN = function (cfg) {\r\n        var symbols = Object.keys(cfg);\r\n        for (var i = 0; i < symbols.length; i++) {\r\n            var symbol = symbols[i];\r\n            var options = cfg[symbol];\r\n            // Split all patterns with more than 2 parts\r\n            cfg[symbol] = options.map(function (pattern) {\r\n                if (pattern.parts.length > 2) {\r\n                    var newSymbol = g();\r\n                    cfg[newSymbol] = [\r\n                        __assign(__assign({}, pattern), { parts: pattern.parts.slice(0, pattern.parts.length - 1) }),\r\n                    ];\r\n                    symbols.push(newSymbol);\r\n                    return __assign(__assign({}, pattern), { parts: [newSymbol, pattern.parts[pattern.parts.length - 1]], metaData: __assign(__assign({}, pattern.metaData), { leftRecursive: true }) });\r\n                }\r\n                return pattern;\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Perform the DEL operation, removing any empty patterns\r\n     * @param cfg The grammar to perform the operation on\r\n     */\r\n    CFG.prototype.performDEL = function (cfg) {\r\n        var symbols = Object.keys(cfg);\r\n        var emptySymbols = []; // Collect a list of symbols that can match an empty string\r\n        var emptySymbolMetaData = {};\r\n        symbols.forEach(function (symbol) {\r\n            var options = cfg[symbol];\r\n            // Remove any empty patterns, but store their metadata\r\n            cfg[symbol] = options.filter(function (option) {\r\n                if (option.parts.length == 0)\r\n                    emptySymbolMetaData[symbol] = option.metaData;\r\n                return option.parts.length != 0;\r\n            });\r\n            // Indicate that this symbol had an empty pattern\r\n            if (options.length != cfg[symbol].length)\r\n                emptySymbols.push(symbol);\r\n        });\r\n        var _loop_1 = function (i) {\r\n            var emptySymbol = emptySymbols[i];\r\n            // Check if any patterns use this symbol, and if so, add option to leave out\r\n            symbols.forEach(function (symbol) {\r\n                var options = cfg[symbol];\r\n                for (var j = 0; j < options.length; j++) {\r\n                    var pattern = options[j];\r\n                    var p = pattern.parts;\r\n                    // Check if either part is the empty symbol\r\n                    if (p.length > 1) {\r\n                        if (p[0] == emptySymbol) {\r\n                            cfg[symbol].push({\r\n                                parts: [p[1]],\r\n                                metaData: __assign(__assign({}, pattern.metaData), { leftEmpty: emptySymbolMetaData[emptySymbol] }),\r\n                            });\r\n                        }\r\n                        if (p[1] == emptySymbol) {\r\n                            cfg[symbol].push({\r\n                                parts: [p[0]],\r\n                                metaData: __assign(__assign({}, pattern.metaData), { rightEmpty: emptySymbolMetaData[emptySymbol] }),\r\n                            });\r\n                        }\r\n                    }\r\n                    // If all symbols can be the empty symbol, indicate this pattern can be empty\r\n                    else if (p[0] == emptySymbol && !emptySymbols.includes(symbol)) {\r\n                        emptySymbols.push(symbol);\r\n                        emptySymbolMetaData[symbol] = __assign(__assign({}, pattern.metaData), (pattern.metaData.leftEmpty\r\n                            ? { rightEmpty: emptySymbolMetaData[emptySymbol] }\r\n                            : { leftEmpty: emptySymbolMetaData[emptySymbol] }));\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        for (var i = 0; i < emptySymbols.length; i++) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    /**\r\n     * Perform the UNIT operation, removing any patterns with just 1 part\r\n     * @param cfg The grammar to perform the operation on\r\n     */\r\n    CFG.prototype.performUNIT = function (cfg) {\r\n        var symbols = Object.keys(cfg);\r\n        var copy = {};\r\n        symbols.forEach(function (symbol) { return (copy[symbol] = __spreadArrays(cfg[symbol])); });\r\n        symbols.forEach(function (symbol) {\r\n            var options = cfg[symbol];\r\n            // TODO: add proper infinite recursion fix instead of it<1e4\r\n            var it = 0;\r\n            var _loop_2 = function (j) {\r\n                var pattern = options[j];\r\n                if (pattern.parts.length == 1) {\r\n                    // Add the definitions of the part\r\n                    var part = pattern.parts[0];\r\n                    var copyOptions = copy[part]; // Use the copy, to make sure we don't use modified rules\r\n                    if (part == symbol)\r\n                        return out_j_1 = j, \"continue\"; // prevent infinite recursion\r\n                    if (copyOptions) {\r\n                        // Copy definitions of non terminal symbols\r\n                        copyOptions.forEach(function (copyPattern) {\r\n                            return options.push(__assign(__assign({}, copyPattern), { metaData: __assign(__assign({}, copyPattern.metaData), { parent: pattern.metaData }) }));\r\n                        });\r\n                        // Remove the symbol\r\n                        options.splice(j, 1);\r\n                        j--;\r\n                    }\r\n                    else {\r\n                        options.splice(j, 1, __assign(__assign({}, pattern), (pattern.metaData.orPattern && {\r\n                            // ^ check to not define a parent without an orPattern\r\n                            metaData: {\r\n                                parent: pattern.metaData,\r\n                                orPattern: undefined,\r\n                            },\r\n                        })));\r\n                    }\r\n                }\r\n                out_j_1 = j;\r\n            };\r\n            var out_j_1;\r\n            for (var j = 0; j < options.length && it++ < 1e4; j++) {\r\n                _loop_2(j);\r\n                j = out_j_1;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Creates a AST tree from a given input of lexical tokens\r\n     * @param input The input\r\n     * @returns The resulting tree or an error\r\n     */\r\n    CFG.prototype.createASTtree = function (input) {\r\n        // Parse the tree using CNF\r\n        var binaryTree = this.CNF.getBinaryTree(input);\r\n        if (\"error\" in binaryTree)\r\n            return binaryTree;\r\n        // Creates an empty cnf node\r\n        var ecnf = function (loc, metaData) { return ({\r\n            text: \"\",\r\n            range: { start: loc, end: loc },\r\n            symbol: metaData.orPattern.defSymbol,\r\n        }); };\r\n        // Creates a stack item\r\n        var c = function (node, metaData, children) { return ({\r\n            cnfNode: node,\r\n            metaData: metaData || (node.pattern && node.pattern.metaData) || {},\r\n            children: children || [],\r\n            range: node.range,\r\n            initialized: false,\r\n        }); };\r\n        // Walk the tree and combine metadata with tree data to retrieve a tree in the shape of the original CFG\r\n        var stack = [c(binaryTree)];\r\n        while (stack.length > 0) {\r\n            var top_1 = stack[stack.length - 1];\r\n            var cnfNode = top_1.cnfNode, metaData = top_1.metaData, children = top_1.children, initialized = top_1.initialized, range = top_1.range;\r\n            if (!initialized) {\r\n                top_1.initialized = true;\r\n                // Add any left 'empty' child to the children to account for the DEL rule\r\n                if (metaData.leftEmpty)\r\n                    children.unshift(c(ecnf(range.start, metaData.leftEmpty), metaData.leftEmpty));\r\n                // Add the original children\r\n                if (cnfNode && \"left\" in cnfNode) {\r\n                    if (cnfNode.left)\r\n                        children.push(c(cnfNode.left));\r\n                    if (cnfNode.right)\r\n                        children.push(c(cnfNode.right));\r\n                }\r\n                // Add any right 'empty' child to the children to account for the DEL rule\r\n                if (metaData.rightEmpty)\r\n                    children.push(c(ecnf(range.start, metaData.rightEmpty), metaData.rightEmpty));\r\n                // Undo UNIT rule by pushing parent data onto the stack as long as there is any\r\n                if (metaData.parent) {\r\n                    // Create a copy of this stack item\r\n                    var si = __assign(__assign({}, top_1), { metaData: __assign(__assign({}, top_1.metaData), { parent: undefined }) });\r\n                    // Transform this item to its parent\r\n                    top_1.children = [si];\r\n                    top_1.metaData = metaData.parent;\r\n                    delete top_1.cnfNode;\r\n                    top_1.initialized = false; // We need to reinitialize for this new parent node\r\n                    // Add the stack item to the stack\r\n                    stack.push(si);\r\n                }\r\n                stack.push.apply(stack, children);\r\n            }\r\n            else {\r\n                // Check whether this is a base token\r\n                if (cnfNode && !(\"left\" in cnfNode) && !metaData.leftEmpty) {\r\n                    stack.pop();\r\n                    top_1.node = __assign({ range: cnfNode.range, text: cnfNode.text, symbol: cnfNode.symbol }, (metaData.orPattern && { pattern: metaData.orPattern }));\r\n                }\r\n                else {\r\n                    // Pop the stack item and assemble the node using its children\r\n                    stack.pop();\r\n                    // Collect the child nodes and undo the BIN rule\r\n                    var childNodes = children.map(function (child) { return child.node; });\r\n                    if (metaData.leftRecursive)\r\n                        childNodes.splice.apply(childNodes, __spreadArrays([0, 1], childNodes[0].children));\r\n                    // Assemble the node\r\n                    var rs = childNodes[0].range.start;\r\n                    var re = childNodes[childNodes.length - 1].range.end;\r\n                    var text = childNodes.reduce(function (a, b) { return a + b.text; }, \"\");\r\n                    top_1.node = {\r\n                        children: childNodes,\r\n                        range: { start: rs, end: re },\r\n                        text: text,\r\n                        pattern: metaData.orPattern,\r\n                        symbol: metaData.orPattern.defSymbol,\r\n                    };\r\n                }\r\n            }\r\n            // Return the result if this was the last node\r\n            if (stack.length == 0)\r\n                return top_1.node;\r\n        }\r\n    };\r\n    /**\r\n     * Walks a given tree, and calls the reduce function on every node\r\n     * @param tree The tree to be walked\r\n     * @param reduce The reduce function to invoke on every node\r\n     * @returns The value returned by the reduce method on the root node\r\n     */\r\n    CFG.walkTree = function (tree, reduce) {\r\n        var c = function (node) { return ({\r\n            node: node,\r\n            result: null,\r\n            children: null,\r\n        }); };\r\n        var stack = [c(tree)];\r\n        while (stack.length > 0) {\r\n            var top_2 = stack[stack.length - 1];\r\n            var node = top_2.node;\r\n            // Check whether this is a base node\r\n            if (!(\"children\" in node)) {\r\n                top_2.result = reduce(node, []);\r\n                stack.pop();\r\n                if (stack.length == 0)\r\n                    return top_2.result;\r\n            }\r\n            else {\r\n                // Check whether the item was just pushed to the stack, of all children were just popped\r\n                if (!top_2.children) {\r\n                    // Add the node's children onto the stack\r\n                    top_2.children = node.children.map(function (n) { return c(n); });\r\n                    stack.push.apply(stack, top_2.children);\r\n                }\r\n                else {\r\n                    // Call the reduce method using the children's values\r\n                    stack.pop();\r\n                    top_2.result = reduce(node, top_2.children.map(function (child) { return child.result; }));\r\n                    if (stack.length == 0)\r\n                        return top_2.result;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return CFG;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://library/./src/CFG.ts?");

/***/ }),

/***/ "./src/CNF.ts":
/*!********************!*\
  !*** ./src/CNF.ts ***!
  \********************/
/*! exports provided: CNF */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CNF\", function() { return CNF; });\nvar __assign = (undefined && undefined.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n/**\r\n * A class to represent a CNF grammar, and allows for creation of a binary tree from a token array\r\n */\r\nvar CNF = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance\r\n     * @param grammar The grammmar to create an instance for\r\n     * @param startSymbol The symbol that a matched string should have\r\n     */\r\n    function CNF(grammar, startSymbol) {\r\n        this.grammar = grammar;\r\n        this.startSymbol = startSymbol;\r\n        this.lookupTable = this.createLookupTable(grammar);\r\n    }\r\n    /**\r\n     * Creates a lookup table for the grammar\r\n     * @param grammar The grammar to create a lookup table for\r\n     * @returns The lookup table for a given grammar\r\n     */\r\n    CNF.prototype.createLookupTable = function (grammar) {\r\n        var lookup = {};\r\n        /**\r\n         * Given a CNF:\r\n         * ```js\r\n         * {\r\n         *   A:[{left:\"C\", right:\"D\"}],\r\n         *   B:[{left:\"D\", right:\"D\"}, {left:\"D\", right:\"E\"}]\r\n         * }\r\n         * ```\r\n         * Creates a lookup table:\r\n         * ```js\r\n         * {\r\n         *   C: {D: [{left:\"C\", right:\"D\", defSymbol:\"A\"}]},\r\n         *   D: {D: [{left:\"D\", right:\"D\", defSymbol:\"B\"}],\r\n         *       E: [{left:\"D\", right:\"E\", defSymbol:\"B\"}]}\r\n         * }\r\n         * ```\r\n         */\r\n        // Go through all definitions\r\n        Object.keys(grammar).forEach(function (symbol) {\r\n            var options = grammar[symbol];\r\n            // Go through the options of every definition\r\n            options.forEach(function (option) {\r\n                // Make sure an object exists to store all patterns that containt he left symbol\r\n                if (!lookup[option.left])\r\n                    lookup[option.left] = {};\r\n                // Make sure an object exists to store all the patterns that contain the left and right symbol\r\n                var leftMap = lookup[option.left];\r\n                if (!leftMap[option.right])\r\n                    leftMap[option.right] = [];\r\n                // Add the pattern to the map\r\n                var leftAndRightMap = leftMap[option.right];\r\n                leftAndRightMap.push(__assign(__assign({}, option), { defSymbol: symbol }));\r\n            });\r\n        });\r\n        return lookup;\r\n    };\r\n    /**\r\n     * Creates a CYk table given an input string\r\n     * @param input The input tokens\r\n     * @param approximate Whether to allow changing a right token to improve the match\r\n     * @returns The table\r\n     */\r\n    CNF.prototype.performCYK = function (input, approximate) {\r\n        // usage of re represents the column or range end, and rs the row or range start (as index of the token)\r\n        // Declare the table\r\n        var table = [];\r\n        for (var rs = 0; rs < input.length; rs++)\r\n            table[rs] = [];\r\n        for (var re = 0; re < input.length; re++) {\r\n            var _loop_1 = function (rs) {\r\n                var cell = (table[rs][re] = {\r\n                    symbols: [],\r\n                    definitions: [],\r\n                    range: { start: null, end: null },\r\n                });\r\n                // Initialize the value if it's on the diagonal\r\n                if (rs == re) {\r\n                    var s = input[rs].symbol;\r\n                    cell.symbols.push(s);\r\n                    // Copy all the definitions and symbols that match\r\n                    var t = this_1.lookupTable[s];\r\n                    if (t && t[\"undefined\"])\r\n                        t[\"undefined\"].forEach(function (def) {\r\n                            if (!cell.symbols.includes(def.defSymbol))\r\n                                cell.symbols.push(def.defSymbol);\r\n                            cell.definitions.push(__assign({ index: rs }, def));\r\n                        });\r\n                    cell.range = input[rs].range;\r\n                }\r\n                else {\r\n                    cell.range.start = table[rs][rs].range.start;\r\n                    cell.range.end = table[re][re].range.end;\r\n                }\r\n            };\r\n            var this_1 = this;\r\n            for (var rs = re; rs >= 0; rs--) {\r\n                _loop_1(rs);\r\n            }\r\n        }\r\n        // Fill the table (skipping the diagonal since that's already initialized)\r\n        for (var re = 1; re < input.length; re++) {\r\n            for (var rs = re - 1; rs >= 0; rs--) {\r\n                var cell = table[rs][re];\r\n                // Go through all the options for combining subparts\r\n                for (var k = rs; k < re; k++) {\r\n                    // Get this option for left and right pair\r\n                    var left = table[rs][k];\r\n                    var right = table[k + 1][re];\r\n                    // Go through all combinations of left and right symbol options\r\n                    for (var lsI = 0; lsI < left.symbols.length; lsI++) {\r\n                        var leftSymbol = left.symbols[lsI];\r\n                        // Check the lookup to see if this fits a definition\r\n                        var leftDefs = this.lookupTable[leftSymbol];\r\n                        if (!leftDefs)\r\n                            continue;\r\n                        // Combine it with all the right options\r\n                        for (var rsI = 0; rsI < right.symbols.length; rsI++) {\r\n                            var rightSymbol = right.symbols[rsI];\r\n                            var defs = leftDefs[rightSymbol];\r\n                            if (!defs)\r\n                                continue;\r\n                            // Add all the definitions to the cell\r\n                            for (var defI = 0; defI < defs.length; defI++) {\r\n                                var def = defs[defI];\r\n                                if (!cell.symbols.includes(def.defSymbol))\r\n                                    cell.symbols.push(def.defSymbol);\r\n                                cell.definitions.push(__assign({ index: k }, def));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // return the result\r\n        return table;\r\n    };\r\n    /**\r\n     * Retrieves the binary tree of some input\r\n     * @param input The input to construct a tree for\r\n     * @returns The tree\r\n     */\r\n    CNF.prototype.getBinaryTree = function (input) {\r\n        var _this = this;\r\n        // Obtain the table using CYK\r\n        var table = this.performCYK(input);\r\n        // Check if we matched the whole input with the required start symbol, and return an error otherwise\r\n        var re = input.length - 1;\r\n        table[0][re].symbols = table[0][re].symbols.filter(function (value) { return value == _this.startSymbol; });\r\n        if (table[0][re].symbols.length == 0)\r\n            return { error: true, table: table };\r\n        // Create a tree from this info\r\n        var c = function (rs, re, symbol) { return ({\r\n            cell: table[rs][re],\r\n            index: [rs, re],\r\n            symbol: symbol,\r\n            node: null,\r\n            pattern: null,\r\n            left: null,\r\n            right: null,\r\n        }); };\r\n        var stack = [c(0, re, this.startSymbol)];\r\n        var _loop_2 = function () {\r\n            var top_1 = stack[stack.length - 1];\r\n            var cell = top_1.cell;\r\n            var _a = top_1.index, rs = _a[0], re_1 = _a[1];\r\n            // Check whether this is a base token, or combined token\r\n            if (rs == re_1) {\r\n                // Remove the item from the stack, and create the node\r\n                stack.pop();\r\n                var definition = cell.definitions.find(function (def) { return def.defSymbol == top_1.symbol; });\r\n                top_1.node = __assign(__assign({}, input[rs]), (definition && { pattern: definition }));\r\n                if (stack.length == 0)\r\n                    return { value: top_1.node };\r\n            }\r\n            else {\r\n                // Check whether the item was just pushed to the stack, of all children were just popped\r\n                if (!top_1.left) {\r\n                    // Get the definition to use, and create the child items to add to the stack\r\n                    var definition = (top_1.pattern = cell.definitions.find(function (def) { return def.defSymbol == top_1.symbol; }));\r\n                    var left = (top_1.left = c(rs, definition.index, definition.left)), right = (top_1.right = c(definition.index + 1, re_1, definition.right));\r\n                    stack.push(left, right);\r\n                }\r\n                else {\r\n                    // Pop the stack item, and assemble the node using the children\r\n                    stack.pop();\r\n                    var left = top_1.left.node;\r\n                    var right = top_1.right.node;\r\n                    top_1.node = {\r\n                        symbol: top_1.pattern.defSymbol,\r\n                        left: left,\r\n                        right: right,\r\n                        pattern: top_1.pattern,\r\n                        range: { start: left.range.start, end: right.range.end },\r\n                        text: left.text + right.text,\r\n                    };\r\n                    if (stack.length == 0)\r\n                        return { value: top_1.node };\r\n                }\r\n            }\r\n        };\r\n        while (stack.length > 0) {\r\n            var state_1 = _loop_2();\r\n            if (typeof state_1 === \"object\")\r\n                return state_1.value;\r\n        }\r\n    };\r\n    return CNF;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://library/./src/CNF.ts?");

/***/ }),

/***/ "./src/Interpreter.ts":
/*!****************************!*\
  !*** ./src/Interpreter.ts ***!
  \****************************/
/*! exports provided: Interpreter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Interpreter\", function() { return Interpreter; });\n/* harmony import */ var _CFG__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CFG */ \"./src/CFG.ts\");\n/* harmony import */ var _Tokenizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Tokenizer */ \"./src/Tokenizer.ts\");\n\r\n\r\n/**\r\n * A class that can be used to create an interpreter\r\n */\r\nvar Interpreter = /** @class */ (function () {\r\n    function Interpreter(interpreter, startSymbol) {\r\n        this.interpreter = interpreter;\r\n        this.startSymbol = startSymbol;\r\n        this.grammar = this.createCFG(interpreter, startSymbol);\r\n        this.tokenizer = this.createTokenizer(interpreter);\r\n    }\r\n    /**\r\n     * Constructs a CFG from the given interpreter definition\r\n     * @param interpreter The interpreter definition\r\n     * @param startSymbol The stary symbol\r\n     * @returns The resulting CFG that has metadata that can be used for evaluation\r\n     */\r\n    Interpreter.prototype.createCFG = function (interpreter, startSymbol) {\r\n        var cfg = {};\r\n        // Create a valid CFG by storing the eval function as metadata for every pattern\r\n        Object.keys(interpreter.grammar).forEach(function (symbol) {\r\n            var options = interpreter.grammar[symbol];\r\n            cfg[symbol] = options.map(function (pattern) { return ({\r\n                parts: pattern.parts,\r\n                metaData: { eval: pattern.eval },\r\n            }); });\r\n        });\r\n        return new _CFG__WEBPACK_IMPORTED_MODULE_0__[\"CFG\"](cfg, startSymbol);\r\n    };\r\n    /**\r\n     * Constructs a tokenizer form the given interpreter definition\r\n     * @param interpreter The interpreter definition\r\n     * @returns The resulting tokenizer\r\n     */\r\n    Interpreter.prototype.createTokenizer = function (interpreter) {\r\n        var tokenizer = {};\r\n        // Map the tokenizre object values to rege only\r\n        Object.keys(interpreter.tokenizer).forEach(function (symbol) {\r\n            var def = interpreter.tokenizer[symbol];\r\n            tokenizer[symbol] =\r\n                typeof def == \"string\" ? def : \"match\" in def ? def.match : def;\r\n        });\r\n        return new _Tokenizer__WEBPACK_IMPORTED_MODULE_1__[\"Tokenizer\"](tokenizer);\r\n    };\r\n    /**\r\n     * Evaluates a given input string, and returns an error or the result\r\n     * @param input The input string\r\n     * @param context The context to pass to evaluators\r\n     * @returns The result\r\n     */\r\n    Interpreter.prototype.evaluate = function (input, context) {\r\n        var _this = this;\r\n        // Tokenize the input\r\n        var tokens = this.tokenizer.tokenize(input);\r\n        if (\"error\" in tokens)\r\n            return tokens;\r\n        // Create a tree out of the tokens\r\n        var tree = this.grammar.createASTtree(tokens);\r\n        if (\"error\" in tree)\r\n            return tree;\r\n        // Walk the tree and invoke the evaluation functions\r\n        if (!context)\r\n            context = {};\r\n        return _CFG__WEBPACK_IMPORTED_MODULE_0__[\"CFG\"].walkTree(tree, function (node, children) {\r\n            // Check whether this is a base token, or other symbol\r\n            if (!(\"children\" in node)) {\r\n                var def = _this.interpreter.tokenizer[node.symbol];\r\n                return typeof def != \"string\" && \"eval\" in def\r\n                    ? def.eval(node.text, def.match instanceof RegExp && def.match.exec(node.text), context)\r\n                    : node.text;\r\n            }\r\n            else {\r\n                return node.pattern.metaData.eval(children, context);\r\n            }\r\n        });\r\n    };\r\n    return Interpreter;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://library/./src/Interpreter.ts?");

/***/ }),

/***/ "./src/Tokenizer.ts":
/*!**************************!*\
  !*** ./src/Tokenizer.ts ***!
  \**************************/
/*! exports provided: Tokenizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Tokenizer\", function() { return Tokenizer; });\n//https://stackoverflow.com/a/6969486/3080469\r\nfunction escapeRegExp(string) {\r\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\r\n}\r\nvar Tokenizer = /** @class */ (function () {\r\n    /**\r\n     * Creates a tokenizer\r\n     * @param tokenizer The tokenizer data\r\n     */\r\n    function Tokenizer(tokenizer) {\r\n        this.tokenizer = Object.keys(tokenizer).map(function (symbol) { return [\r\n            symbol,\r\n            typeof tokenizer[symbol] == \"string\"\r\n                ? new RegExp(escapeRegExp(tokenizer[symbol]), \"y\")\r\n                : new RegExp(tokenizer[symbol], \"y\"),\r\n        ]; });\r\n    }\r\n    /**\r\n     * Tokenize the given input\r\n     * @param input\r\n     */\r\n    Tokenizer.prototype.tokenize = function (input) {\r\n        var tokens = [];\r\n        var index = 0;\r\n        outer: while (true) {\r\n            // Try all matchers\r\n            for (var i = 0; i < this.tokenizer.length; i++) {\r\n                var _a = this.tokenizer[i], symbol = _a[0], regex = _a[1];\r\n                regex.lastIndex = index;\r\n                var match = regex.exec(input);\r\n                // If a match was found, continue\r\n                if (match) {\r\n                    tokens.push({\r\n                        symbol: symbol,\r\n                        text: match[0],\r\n                        range: { start: index, end: index + match[0].length },\r\n                    });\r\n                    index += match[0].length;\r\n                    if (match[0].length == 0)\r\n                        if (index == input.length)\r\n                            break;\r\n                        else\r\n                            throw Error(\"Regex may not match 0 length strings: \" +\r\n                                regex +\r\n                                \", use an empty pattern in the CFG instead\");\r\n                    continue outer;\r\n                }\r\n            }\r\n            // If no match could be mage\r\n            if (index == input.length)\r\n                return tokens;\r\n            else\r\n                return { error: true, index: index };\r\n        }\r\n    };\r\n    return Tokenizer;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://library/./src/Tokenizer.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! exports provided: CFG, CNF, Tokenizer, Interpreter, BNFinterpreter, BNF */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _CFG__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CFG */ \"./src/CFG.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CFG\", function() { return _CFG__WEBPACK_IMPORTED_MODULE_0__[\"CFG\"]; });\n\n/* harmony import */ var _CNF__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CNF */ \"./src/CNF.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CNF\", function() { return _CNF__WEBPACK_IMPORTED_MODULE_1__[\"CNF\"]; });\n\n/* harmony import */ var _Tokenizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Tokenizer */ \"./src/Tokenizer.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Tokenizer\", function() { return _Tokenizer__WEBPACK_IMPORTED_MODULE_2__[\"Tokenizer\"]; });\n\n/* harmony import */ var _Interpreter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Interpreter */ \"./src/Interpreter.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Interpreter\", function() { return _Interpreter__WEBPACK_IMPORTED_MODULE_3__[\"Interpreter\"]; });\n\n/* harmony import */ var _BNF__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BNF */ \"./src/BNF.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"BNFinterpreter\", function() { return _BNF__WEBPACK_IMPORTED_MODULE_4__[\"BNFinterpreter\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"BNF\", function() { return _BNF__WEBPACK_IMPORTED_MODULE_4__[\"BNF\"]; });\n\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://library/./src/index.ts?");

/***/ })

/******/ });
});